
firefly_jar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000276  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000276  0000030a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800070  00800070  0000031a  2**0
                  ALLOC
  3 .stab         000005ac  00000000  00000000  0000031c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000078a  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e6 e7       	ldi	r30, 0x76	; 118
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <.do_copy_data_start>

00000028 <.do_copy_data_loop>:
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0

0000002c <.do_copy_data_start>:
  2c:	a0 37       	cpi	r26, 0x70	; 112
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <.do_copy_data_loop>

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e7       	ldi	r26, 0x70	; 112
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a2 37       	cpi	r26, 0x72	; 114
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	ff d0       	rcall	.+510    	; 0x242 <main>
  44:	16 c1       	rjmp	.+556    	; 0x272 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <getTime>:

//TODO return a random time interval from 1 to 255
int getTime()
{
	return 50;
}
  48:	82 e3       	ldi	r24, 0x32	; 50
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	08 95       	ret

0000004e <pulseLeds>:

void pulseLeds()
{
	PORTB |= ALL_LEDS;
  4e:	88 b3       	in	r24, 0x18	; 24
  50:	8f 61       	ori	r24, 0x1F	; 31
  52:	88 bb       	out	0x18, r24	; 24
  54:	80 91 70 00 	lds	r24, 0x0070
  58:	40 e0       	ldi	r20, 0x00	; 0
	{
		for(j = 0; j < N_LEDS; j++)
		{
			if(led_data[j].mBrightness <= i)
			{
				PORTB &=~ (1 << led_data[j].mPin);
  5a:	a1 e0       	ldi	r26, 0x01	; 1
  5c:	b0 e0       	ldi	r27, 0x00	; 0
  5e:	23 c0       	rjmp	.+70     	; 0xa6 <__stack+0x7>
	PORTB |= ALL_LEDS;
	for(i = 0; i < 255; i++)
	{
		for(j = 0; j < N_LEDS; j++)
		{
			if(led_data[j].mBrightness <= i)
  60:	83 2f       	mov	r24, r19
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	63 e0       	ldi	r22, 0x03	; 3
  66:	70 e0       	ldi	r23, 0x00	; 0
  68:	f2 d0       	rcall	.+484    	; 0x24e <__mulhi3>
  6a:	fc 01       	movw	r30, r24
  6c:	e0 5a       	subi	r30, 0xA0	; 160
  6e:	ff 4f       	sbci	r31, 0xFF	; 255
  70:	80 81       	ld	r24, Z
  72:	48 17       	cp	r20, r24
  74:	98 f0       	brcs	.+38     	; 0x9c <pulseLeds+0x4e>
			{
				PORTB &=~ (1 << led_data[j].mPin);
  76:	28 b3       	in	r18, 0x18	; 24
  78:	83 2f       	mov	r24, r19
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	63 e0       	ldi	r22, 0x03	; 3
  7e:	70 e0       	ldi	r23, 0x00	; 0
  80:	e6 d0       	rcall	.+460    	; 0x24e <__mulhi3>
  82:	fc 01       	movw	r30, r24
  84:	e0 5a       	subi	r30, 0xA0	; 160
  86:	ff 4f       	sbci	r31, 0xFF	; 255
  88:	cd 01       	movw	r24, r26
  8a:	02 80       	ldd	r0, Z+2	; 0x02
  8c:	02 c0       	rjmp	.+4      	; 0x92 <pulseLeds+0x44>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	0a 94       	dec	r0
  94:	e2 f7       	brpl	.-8      	; 0x8e <pulseLeds+0x40>
  96:	80 95       	com	r24
  98:	82 23       	and	r24, r18
  9a:	88 bb       	out	0x18, r24	; 24
  9c:	3f 5f       	subi	r19, 0xFF	; 255
void pulseLeds()
{
	PORTB |= ALL_LEDS;
	for(i = 0; i < 255; i++)
	{
		for(j = 0; j < N_LEDS; j++)
  9e:	35 30       	cpi	r19, 0x05	; 5
  a0:	f9 f6       	brne	.-66     	; 0x60 <pulseLeds+0x12>
  a2:	4f 5f       	subi	r20, 0xFF	; 255
  a4:	85 e0       	ldi	r24, 0x05	; 5
}

void pulseLeds()
{
	PORTB |= ALL_LEDS;
	for(i = 0; i < 255; i++)
  a6:	4f 3f       	cpi	r20, 0xFF	; 255
  a8:	11 f0       	breq	.+4      	; 0xae <__stack+0xf>
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	f8 cf       	rjmp	.-16     	; 0x9e <pulseLeds+0x50>
  ae:	80 93 70 00 	sts	0x0070, r24
  b2:	40 93 71 00 	sts	0x0071, r20
			{
				PORTB &=~ (1 << led_data[j].mPin);
			}
		}
	}
	PORTB &=~ ALL_LEDS;
  b6:	c0 98       	cbi	0x18, 0	; 24
}
  b8:	08 95       	ret

000000ba <updateLedState>:

void updateLedState()
{
  ba:	30 e0       	ldi	r19, 0x00	; 0

					//specify the "up" direction for pulsing
					led_data[i].mPin |= (1 << PULSE_DIRECTION);

					//set the ON time
					led_data[i].mTime = getTime();
  bc:	42 e3       	ldi	r20, 0x32	; 50
  be:	b7 c0       	rjmp	.+366    	; 0x22e <updateLedState+0x174>

void updateLedState()
{
	for(i = 0; i < N_LEDS; i++)
	{
		switch(led_data[i].mBrightness)
  c0:	83 2f       	mov	r24, r19
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	63 e0       	ldi	r22, 0x03	; 3
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	c2 d0       	rcall	.+388    	; 0x24e <__mulhi3>
  ca:	fc 01       	movw	r30, r24
  cc:	e0 5a       	subi	r30, 0xA0	; 160
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	20 81       	ld	r18, Z
  d2:	22 23       	and	r18, r18
  d4:	09 f4       	brne	.+2      	; 0xd8 <updateLedState+0x1e>
  d6:	41 c0       	rjmp	.+130    	; 0x15a <updateLedState+0xa0>
  d8:	28 3c       	cpi	r18, 0xC8	; 200
  da:	09 f0       	breq	.+2      	; 0xde <updateLedState+0x24>
  dc:	7c c0       	rjmp	.+248    	; 0x1d6 <updateLedState+0x11c>
		{
			case MAX://led is on
				if(--led_data[i].mTime == 0)
  de:	83 2f       	mov	r24, r19
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	63 e0       	ldi	r22, 0x03	; 3
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	b3 d0       	rcall	.+358    	; 0x24e <__mulhi3>
  e8:	fc 01       	movw	r30, r24
  ea:	e0 5a       	subi	r30, 0xA0	; 160
  ec:	ff 4f       	sbci	r31, 0xFF	; 255
  ee:	21 81       	ldd	r18, Z+1	; 0x01
  f0:	21 50       	subi	r18, 0x01	; 1
  f2:	83 2f       	mov	r24, r19
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	63 e0       	ldi	r22, 0x03	; 3
  f8:	70 e0       	ldi	r23, 0x00	; 0
  fa:	a9 d0       	rcall	.+338    	; 0x24e <__mulhi3>
  fc:	fc 01       	movw	r30, r24
  fe:	e0 5a       	subi	r30, 0xA0	; 160
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	21 83       	std	Z+1, r18	; 0x01
 104:	22 23       	and	r18, r18
 106:	09 f0       	breq	.+2      	; 0x10a <updateLedState+0x50>
 108:	91 c0       	rjmp	.+290    	; 0x22c <updateLedState+0x172>
				{
					//decrement the brightness, this puts the LED in a
					//pulse state
					led_data[i].mBrightness--;
 10a:	83 2f       	mov	r24, r19
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	63 e0       	ldi	r22, 0x03	; 3
 110:	70 e0       	ldi	r23, 0x00	; 0
 112:	9d d0       	rcall	.+314    	; 0x24e <__mulhi3>
 114:	dc 01       	movw	r26, r24
 116:	a0 5a       	subi	r26, 0xA0	; 160
 118:	bf 4f       	sbci	r27, 0xFF	; 255
 11a:	83 2f       	mov	r24, r19
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	63 e0       	ldi	r22, 0x03	; 3
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	95 d0       	rcall	.+298    	; 0x24e <__mulhi3>
 124:	fc 01       	movw	r30, r24
 126:	e0 5a       	subi	r30, 0xA0	; 160
 128:	ff 4f       	sbci	r31, 0xFF	; 255
 12a:	80 81       	ld	r24, Z
 12c:	81 50       	subi	r24, 0x01	; 1
 12e:	8c 93       	st	X, r24

					//specify the "down" direction for pulsing
					led_data[i].mPin &=~ (1 << PULSE_DIRECTION);
 130:	83 2f       	mov	r24, r19
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	63 e0       	ldi	r22, 0x03	; 3
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	8a d0       	rcall	.+276    	; 0x24e <__mulhi3>
 13a:	dc 01       	movw	r26, r24
 13c:	a0 5a       	subi	r26, 0xA0	; 160
 13e:	bf 4f       	sbci	r27, 0xFF	; 255
 140:	83 2f       	mov	r24, r19
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	63 e0       	ldi	r22, 0x03	; 3
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	82 d0       	rcall	.+260    	; 0x24e <__mulhi3>
 14a:	fc 01       	movw	r30, r24
 14c:	e0 5a       	subi	r30, 0xA0	; 160
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	82 81       	ldd	r24, Z+2	; 0x02
 152:	8f 77       	andi	r24, 0x7F	; 127
 154:	12 96       	adiw	r26, 0x02	; 2
 156:	8c 93       	st	X, r24
 158:	69 c0       	rjmp	.+210    	; 0x22c <updateLedState+0x172>
				}
				break;
			case 0://led is off
				if(--led_data[i].mTime == 0)
 15a:	83 2f       	mov	r24, r19
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	63 e0       	ldi	r22, 0x03	; 3
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	75 d0       	rcall	.+234    	; 0x24e <__mulhi3>
 164:	fc 01       	movw	r30, r24
 166:	e0 5a       	subi	r30, 0xA0	; 160
 168:	ff 4f       	sbci	r31, 0xFF	; 255
 16a:	21 81       	ldd	r18, Z+1	; 0x01
 16c:	21 50       	subi	r18, 0x01	; 1
 16e:	83 2f       	mov	r24, r19
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	63 e0       	ldi	r22, 0x03	; 3
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	6b d0       	rcall	.+214    	; 0x24e <__mulhi3>
 178:	fc 01       	movw	r30, r24
 17a:	e0 5a       	subi	r30, 0xA0	; 160
 17c:	ff 4f       	sbci	r31, 0xFF	; 255
 17e:	21 83       	std	Z+1, r18	; 0x01
 180:	22 23       	and	r18, r18
 182:	09 f0       	breq	.+2      	; 0x186 <updateLedState+0xcc>
 184:	53 c0       	rjmp	.+166    	; 0x22c <updateLedState+0x172>
				{
					//increment the brightness,this puts the LED in
					//a pulse state
					led_data[i].mBrightness++;
 186:	83 2f       	mov	r24, r19
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	63 e0       	ldi	r22, 0x03	; 3
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	5f d0       	rcall	.+190    	; 0x24e <__mulhi3>
 190:	dc 01       	movw	r26, r24
 192:	a0 5a       	subi	r26, 0xA0	; 160
 194:	bf 4f       	sbci	r27, 0xFF	; 255
 196:	83 2f       	mov	r24, r19
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	63 e0       	ldi	r22, 0x03	; 3
 19c:	70 e0       	ldi	r23, 0x00	; 0
 19e:	57 d0       	rcall	.+174    	; 0x24e <__mulhi3>
 1a0:	fc 01       	movw	r30, r24
 1a2:	e0 5a       	subi	r30, 0xA0	; 160
 1a4:	ff 4f       	sbci	r31, 0xFF	; 255
 1a6:	80 81       	ld	r24, Z
 1a8:	8f 5f       	subi	r24, 0xFF	; 255
 1aa:	8c 93       	st	X, r24

					//specify the "up" direction for pulsing
					led_data[i].mPin |= (1 << PULSE_DIRECTION);
 1ac:	83 2f       	mov	r24, r19
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	63 e0       	ldi	r22, 0x03	; 3
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	4c d0       	rcall	.+152    	; 0x24e <__mulhi3>
 1b6:	dc 01       	movw	r26, r24
 1b8:	a0 5a       	subi	r26, 0xA0	; 160
 1ba:	bf 4f       	sbci	r27, 0xFF	; 255
 1bc:	83 2f       	mov	r24, r19
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	63 e0       	ldi	r22, 0x03	; 3
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	44 d0       	rcall	.+136    	; 0x24e <__mulhi3>
 1c6:	fc 01       	movw	r30, r24
 1c8:	e0 5a       	subi	r30, 0xA0	; 160
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	82 81       	ldd	r24, Z+2	; 0x02
 1ce:	80 68       	ori	r24, 0x80	; 128
 1d0:	12 96       	adiw	r26, 0x02	; 2
 1d2:	8c 93       	st	X, r24
 1d4:	22 c0       	rjmp	.+68     	; 0x21a <updateLedState+0x160>
					//set the ON time
					led_data[i].mTime = getTime();
				}
				break;
			default: //pulse state
				if(led_data[i].mPin & (1 << PULSE_DIRECTION))
 1d6:	83 2f       	mov	r24, r19
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	63 e0       	ldi	r22, 0x03	; 3
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	37 d0       	rcall	.+110    	; 0x24e <__mulhi3>
 1e0:	fc 01       	movw	r30, r24
 1e2:	e0 5a       	subi	r30, 0xA0	; 160
 1e4:	ff 4f       	sbci	r31, 0xFF	; 255
 1e6:	82 81       	ldd	r24, Z+2	; 0x02
 1e8:	87 ff       	sbrs	r24, 7
 1ea:	0b c0       	rjmp	.+22     	; 0x202 <updateLedState+0x148>
				{
					led_data[i].mBrightness++;
 1ec:	83 2f       	mov	r24, r19
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	63 e0       	ldi	r22, 0x03	; 3
 1f2:	70 e0       	ldi	r23, 0x00	; 0
 1f4:	2c d0       	rcall	.+88     	; 0x24e <__mulhi3>
 1f6:	fc 01       	movw	r30, r24
 1f8:	e0 5a       	subi	r30, 0xA0	; 160
 1fa:	ff 4f       	sbci	r31, 0xFF	; 255
 1fc:	2f 5f       	subi	r18, 0xFF	; 255
 1fe:	20 83       	st	Z, r18
 200:	15 c0       	rjmp	.+42     	; 0x22c <updateLedState+0x172>
				}
				else
				{
					if(--led_data[i].mBrightness == 0)
 202:	21 50       	subi	r18, 0x01	; 1
 204:	83 2f       	mov	r24, r19
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	63 e0       	ldi	r22, 0x03	; 3
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	20 d0       	rcall	.+64     	; 0x24e <__mulhi3>
 20e:	fc 01       	movw	r30, r24
 210:	e0 5a       	subi	r30, 0xA0	; 160
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	20 83       	st	Z, r18
 216:	22 23       	and	r18, r18
 218:	49 f4       	brne	.+18     	; 0x22c <updateLedState+0x172>
					{
						led_data[i].mTime = getTime();
 21a:	83 2f       	mov	r24, r19
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	63 e0       	ldi	r22, 0x03	; 3
 220:	70 e0       	ldi	r23, 0x00	; 0
 222:	15 d0       	rcall	.+42     	; 0x24e <__mulhi3>
 224:	fc 01       	movw	r30, r24
 226:	e0 5a       	subi	r30, 0xA0	; 160
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	41 83       	std	Z+1, r20	; 0x01
 22c:	3f 5f       	subi	r19, 0xFF	; 255
	PORTB &=~ ALL_LEDS;
}

void updateLedState()
{
	for(i = 0; i < N_LEDS; i++)
 22e:	35 30       	cpi	r19, 0x05	; 5
 230:	08 f4       	brcc	.+2      	; 0x234 <updateLedState+0x17a>
 232:	46 cf       	rjmp	.-372    	; 0xc0 <updateLedState+0x6>
 234:	30 93 71 00 	sts	0x0071, r19
					}
				}
				break;
		}
	}
}
 238:	08 95       	ret

0000023a <setup>:


void setup()
 {
	//set all LED pins as outputs
	DDRB |= ALL_LEDS;
 23a:	87 b3       	in	r24, 0x17	; 23
 23c:	8f 61       	ori	r24, 0x1F	; 31
 23e:	87 bb       	out	0x17, r24	; 23
	// initialize Output Compare Register A to 0
//	OCR0A = 250;

	// Start timer at Fcpu / 8
//	TCCR0B |= (1 << CS01);
}
 240:	08 95       	ret

00000242 <main>:


void setup()
 {
	//set all LED pins as outputs
	DDRB |= ALL_LEDS;
 242:	87 b3       	in	r24, 0x17	; 23
 244:	8f 61       	ori	r24, 0x1F	; 31
 246:	87 bb       	out	0x17, r24	; 23
	setup();

	//infinite loop
	while(1)
	{
		updateLedState();
 248:	38 df       	rcall	.-400    	; 0xba <updateLedState>
		pulseLeds();
 24a:	01 df       	rcall	.-510    	; 0x4e <pulseLeds>
 24c:	fd cf       	rjmp	.-6      	; 0x248 <main+0x6>

0000024e <__mulhi3>:
 24e:	55 27       	eor	r21, r21
 250:	00 24       	eor	r0, r0

00000252 <__mulhi3_loop>:
 252:	80 ff       	sbrs	r24, 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <__mulhi3_skip1>
 256:	06 0e       	add	r0, r22
 258:	57 1f       	adc	r21, r23

0000025a <__mulhi3_skip1>:
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	61 15       	cp	r22, r1
 260:	71 05       	cpc	r23, r1
 262:	21 f0       	breq	.+8      	; 0x26c <__mulhi3_exit>
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	00 97       	sbiw	r24, 0x00	; 0
 26a:	99 f7       	brne	.-26     	; 0x252 <__mulhi3_loop>

0000026c <__mulhi3_exit>:
 26c:	95 2f       	mov	r25, r21
 26e:	80 2d       	mov	r24, r0
 270:	08 95       	ret

00000272 <_exit>:
 272:	f8 94       	cli

00000274 <__stop_program>:
 274:	ff cf       	rjmp	.-2      	; 0x274 <__stop_program>
